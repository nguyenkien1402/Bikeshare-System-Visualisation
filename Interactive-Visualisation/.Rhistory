output$db2_by_weekday <- renderPlotly({
if(input$year == 'all'){
s1 <- event_data("plotly_click", source = "bar2", priority = "event")
if(!is.null(s1)){
if(!is.null(nchar(s1$x)) & nchar(s1$x)>3){
s11 <- event_data("plotly_click", source="bar2", priority = "event")
if(length(s11)){
vars1 <- c(s11[["x"]], s11[["y"]])
year_month <- vars1[1]
year_month <- paste(year_month,"-01", sep="")
year_month <- as.factor(year_month)
month <- as.numeric(format(as.Date(year_month),"%m"))
year  <- format(as.Date(year_month),"%Y")
data_year <- bikeshare[bikeshare$year==year,]
data_month <- data_year[data_year$month==month,]
austin_bike_share <- data_month %>% group_by(day) %>% tally()
avg_hours_per_weekdays <- austin_bike_share %>% filter(day != "Sat", day !="Sun")
avg_hours_per_weekend <- austin_bike_share %>% filter(day == "Sat" | day =="Sun")
data <- rbind(avg_hours_per_weekdays, avg_hours_per_weekend)
plot_ly(data, x=~n, y=~reorder(day,n), type='bar', orientation='h')
}
}
else{
austin_bike_share <- bikeshare %>% group_by(day) %>% tally()
avg_hours_per_weekdays <- austin_bike_share %>% filter(day != "Sat", day !="Sun")
avg_hours_per_weekend <- austin_bike_share %>% filter(day == "Sat" | day =="Sun")
data <- rbind(avg_hours_per_weekdays, avg_hours_per_weekend)
plot_ly(data, x=~n, y=~reorder(day,n), type='bar', orientation='h')
}
}
else{
austin_bike_share <- bikeshare %>% group_by(day) %>% tally()
avg_hours_per_weekdays <- austin_bike_share %>% filter(day != "Sat", day !="Sun")
avg_hours_per_weekend <- austin_bike_share %>% filter(day == "Sat" | day =="Sun")
data <- rbind(avg_hours_per_weekdays, avg_hours_per_weekend)
plot_ly(data, x=~n, y=~reorder(day,n), type='bar', orientation='h')
}
}else{
s2 <- event_data("plotly_click", source = "bar2", priority = "event")
if(!is.null(s2)){
if(!is.null(nchar(s2$x)) & nchar(s2$x)<3){
s22 <- event_data("plotly_click", source = "bar2", priority = "event")
if(length(s22)){
year <- input$year
vars2 <- c(s22[["x"]], s22[["y"]])
month <- as.numeric(vars2[1])
data_year <- bikeshare[bikeshare$year==year,]
data_month <- data_year[data_year$month==month,]
austin_bike_share <- data_month %>% group_by(day) %>% tally()
avg_hours_per_weekdays <- austin_bike_share %>% filter(day != "Sat", day !="Sun")
avg_hours_per_weekend <- austin_bike_share %>% filter(day == "Sat" | day =="Sun")
data <- rbind(avg_hours_per_weekdays, avg_hours_per_weekend)
plot_ly(data, x=~n, y=~reorder(day,n), type='bar', orientation='h')
}
}else{
year <- input$year
austin_bike_share <- bikeshare %>% group_by(year, day) %>% tally()
austin_bike_share <- austin_bike_share[austin_bike_share$year == year,]
avg_hours_per_weekdays <- austin_bike_share %>% filter(day != "Sat", day !="Sun")
avg_hours_per_weekend <- austin_bike_share %>% filter(day == "Sat" | day =="Sun")
data <- rbind(avg_hours_per_weekdays, avg_hours_per_weekend)
plot_ly(data, x=~n, y=~reorder(day,n), type='bar', orientation='h')
}
}else{
year <- input$year
austin_bike_share <- bikeshare %>% group_by(year, day) %>% tally()
austin_bike_share <- austin_bike_share[austin_bike_share$year == year,]
avg_hours_per_weekdays <- austin_bike_share %>% filter(day != "Sat", day !="Sun")
avg_hours_per_weekend <- austin_bike_share %>% filter(day == "Sat" | day =="Sun")
data <- rbind(avg_hours_per_weekdays, avg_hours_per_weekend)
plot_ly(data, x=~n, y=~reorder(day,n), type='bar', orientation='h')
}
}
})
output$db4_popular_station <- renderPlotly({
popular_station <- bikeshare %>% group_by(start_station_name) %>% tally() %>% arrange(-n)
p <- plot_ly(
type='table',
columnorder=c(1,2),
columnwidth=c(400,80),
header = list(
values = c('<b>Top 10 Popular Stations</b>', '<b># of trip</b>'),
line = list(color='#ffffff'),
fill = list(color='#ffffff'),
align=c('left'),
font=list(color='black', size=20),
height=50
),
cells = list(
values = unname(popular_station[1:10,]),
line=list(color='white'),
fill=list(color='white'),
align=c('left'),
font=list(color=c('black'), size=16),
height = 50
)
)
p
})
output$db4_popular_route <- renderPlotly({
popular_route <- bikeshare %>% group_by(start_station_name, end_station_name) %>% tally() %>% arrange(-n)
p <- plot_ly(
type='table',
columnorder=c(1,2,3),
columnwidth=c(200,200,80),
header = list(
values = c('<b>Top 10 Popular Route-Origin</b>','<b>Destination</b>','<b># of trip</b>'),
line = list(color='#ffffff'),
fill = list(color='#ffffff'),
align=c('left'),
font=list(color='black', size=20),
height=50
),
cells = list(
values = unname(popular_route[1:10,]),
line=list(color='white'),
fill=list(color='white'),
align=c('left'),
font=list(color=c('black'), size=16),
height = 50
)
)
p
})
output$user_type_duration <- renderPlotly({
duration <- bikeshare$duration_minutes
duration <- cut(duration, breaks=c(-Inf,5,10,15,20,25,30,35,40,45,50,55,60,70,80,90,100,110,120,Inf),
labels=c("0-5","5-10","10-15","15-20","20-25","25-30","30-35","35-40","40-45","45-50","50-55","55-60","60-70",
"70-80","80-90","90-100","100-110","110-120",">120"))
bikeshare$duration_discrete <- duration
if(input$year == "all"){
new_data <- bikeshare %>% group_by(duration_discrete) %>% tally()
plot_ly(new_data, x=~duration_discrete, y=~n, type="bar") %>%
layout(title="Rides by Duration Over Years from 2014 to 2016",
xaxis=list(title="Duration"),
yaxis=list(title="Number of Trip"))
}else{
num <- as.numeric(input$year)
data <- bikeshare %>% group_by(year, duration_discrete) %>% tally()
data <- data[data$year == num,]
plot_ly(data, x=~duration_discrete, y=~n, type="bar") %>%
layout(title=paste("Rides by Duration Over a Year",num),
xaxis=list(title="Duration"),
yaxis=list(title="Number of Trip"))
}
})
output$map_daily_analysis <- renderLeaflet({
tilesURL <- "http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
basemap <- leaflet(width = "100%", height = "100%") %>%
addProviderTiles(providers$CartoDB.DarkMatter, group = "dark")
colors <- c("#3093e5", "#fcba50")
data <- agg_station
basemap %>%
addMinicharts(
lng = data$longitude,
lat = data$latitude,
chartdata = data[,c("start_n","end_n")],
layerId = data$station_name,
width = 60 * sqrt(data$start_n) / sqrt(data$start_n + data$end_n),
type='pie',
legend = FALSE,
colorPalette = colors
) %>%
addLegend(
"topright",
colors = colors,
opacity = 1,
labels = c("Start Station", "Destination Station")
)
})
output$mini_trip_day_text <- renderText({
paste("Date, hour:",input$timerange)
})
output$mymap <- renderLeaflet({
if(input$map_station == "origin"){
m <- leaflet(agg_start_station) %>%
addCircleMarkers(lat = ~start_station_latitude, lng = ~start_station_longitude, radius=~n/800,
label = start_map_label, stroke = TRUE, color = "#7374F7", fillOpacity = 0.7,
layerId = ~start_station_name) %>%
addTiles() %>% addProviderTiles("Wikimedia")
# addTiles(
#   urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
#   attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
# )
selected <- start_station[start_station$start_station_name == input$mymap_marker_click$id,]
selected$end_station_name <- as.character(selected$end_station_name)
if(input$map_station_top == 100){
k <- 12
}else{
k <- input$map_station_top
}
selected <- selected[1:k,]
m %>% registerPlugin(antPlugin) %>%
onRender("function(el, x, data) {
var myMap = this;
myMap.on('layeradd',
function(e){
var lyr = e.layer;
if('need_decorator' in lyr.options){
for (var i = 0; i < data.start_station_name.length; i++) {
polylinePoints = [
new L.LatLng(data.start_station_latitude[i], data.start_station_longitude[i]),
new L.LatLng(data.end_station_latitude[i], data.end_station_longitude[i]),
];
polylineOptions = {color: '#138207',
weight:data.n[i]/300,  delay:400, dashArray:[30,30], opacity: 0.7,
hardwareAccelerated: true};
L.polyline.antPath(polylinePoints, polylineOptions).addTo(this);
}
}
}
)
}", data = selected)
}else{
m <- leaflet(agg_end_station) %>%
addCircleMarkers(lat = ~end_station_latitude, lng = ~end_station_longitude, radius=~n/800,
label = end_map_label, stroke = TRUE, color = "#7374F7", fillOpacity = 0.9,
layerId = ~end_station_name) %>%
addProviderTiles("Wikimedia")
start_station$end_station_name <- as.character(start_station$end_station_name)
selected <- start_station[start_station$end_station_name == input$mymap_marker_click$id,]
if(input$map_station_top == 100){
k <- 12
}else{
k <- input$map_station_top
}
selected <- selected[1:k,]
m %>% registerPlugin_2(antPlugin) %>%
onRender("function(el, x, data) {
var myMap1 = this;
myMap1.on('layeradd',
function(e){
var lyr1 = e.layer;
if('need_decorator' in lyr1.options){
for (var i = 0; i < data.start_station_name.length; i++) {
polylinePoints1 = [
new L.LatLng(data.end_station_latitude[i], data.end_station_longitude[i]),
new L.LatLng(data.start_station_latitude[i], data.start_station_longitude[i]),
];
polylineOptions1 = {color: '#f4426b',
weight:data.n[i]/300,  delay:400, dashArray:[30,30], opacity: 0.7,
hardwareAccelerated: true, reverse: true};
L.polyline.antPath(polylinePoints1, polylineOptions1).addTo(this);
}
}
}
)
}", data = selected)
}
})
output$selected_station <- renderText({
if(!is.null(input$mymap_marker_click)){
if(input$map_station =="origin"){
paste("<b>","Origin Station:",input$mymap_marker_click$id,"</b>")
}else{
paste("<b>","Destination Station:", input$mymap_marker_click$id,"</b>")
}
}
})
output$selected_station_2 <- renderText({
if(!is.null(input$mymap_marker_click)){
paste("Station:",input$mymap_marker_click$id)
}else{
"All Station"
}
})
output$map_count_station <- renderPlotly({
if(!is.null(input$mymap_marker_click)){
if(input$map_station == "origin"){
ax <- list(
title = "Destination Station",
zeroline = TRUE,
showline = TRUE,
showticklabels = FALSE,
showgrid = FALSE
)
selected <- start_station[start_station$start_station_name == input$mymap_marker_click$id,]
selected <- selected[1:input$map_station_top, c(4,7)]
plot_ly(selected, x=~n, y=~reorder(end_station_name,n), type='bar', orientation='h') %>%
layout(xaxis=ax, yaxis=ax)
}else{
ax <- list(
title = "Origin Station",
zeroline = TRUE,
showline = TRUE,
showticklabels = FALSE,
showgrid = FALSE
)
selected <- start_station[start_station$end_station_name == input$mymap_marker_click$id,]
selected <- selected[1:input$map_station_top, c(1,7)]
plot_ly(selected, x=~n, y=~reorder(start_station_name,n), type='bar', orientation='h') %>%
layout(xaxis=ax, yaxis=ax)
}
}
})
output$map_borrow_activity_hour <- renderPlotly({
if(!is.null(input$mymap_marker_click)){
bikeshare$start_station_name <- as.character(bikeshare$start_station_name)
station_statistic <- bikeshare[bikeshare$start_station_name == input$mymap_marker_click$id,]
station_statistic_hour <- station_statistic %>% group_by(hour) %>% tally()
plot_ly(station_statistic_hour, x=~hour, y=~n, type='bar') %>% layout(xaxis=list(title="Hours"), yaxis=list(title="Number of trip"))
}else{
data <- bikeshare %>% group_by(hour) %>% tally()
plot_ly(data, x=~hour, y=~n, type='bar') %>% layout(xaxis=list(title="Hours"), yaxis=list(title="Number of trip"))
}
})
output$map_activity_week_day <- renderPlotly({
if(!is.null(input$mymap_marker_click)){
bikeshare$start_station_name <- as.character(bikeshare$start_station_name)
station_statistic <- bikeshare[bikeshare$start_station_name == input$mymap_marker_click$id,]
station_statistic_week <- station_statistic %>% group_by(day) %>% tally()
plot_ly(station_statistic_week, x=~day, y=~n, type='bar') %>% layout(xaxis=list(title="Days"), yaxis=list(title="Number of trip"))
}else{
data <- bikeshare %>% group_by(day) %>% tally()
plot_ly(data, x=~day, y=~n, type='bar') %>% layout(xaxis=list(title="Day"), yaxis=list(title="Number of trip"))
}
})
# Update minicharts when the slider value change
observeEvent(input$timerange ,{
tilesURL <- "http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
if(hour(input$timerange) > 18 | hour(input$timerange) < 6){
if(variables$currentDate == as.Date(input$timerange, format="%Y-%m-%d")){
if(input$timerange %>% ymd_hms() %in% agg_station$day_hour){
data <- agg_station[agg_station$day_hour == input$timerange %>% ymd_hms(),]
station_update$day_hour <- input$timerange %>% ymd_hms()
station_data_update <- station_update[!(station_update$station_name %in% data$station_name),]
data <- rbind(data, station_data_update)
data <- data %>% arrange(station_name)
if(is.null(variables$data_update) == TRUE){
variables$data_update <- data
leafletProxy("map_daily_analysis") %>% clearGroup(group = "light") %>%
addProviderTiles(providers$CartoDB.DarkMatter, group = "dark") %>%
updateMinicharts(
chartdata = variables$data_update[, c("start_n","end_n")],
layerId = variables$data_update$station_name,
legend = FALSE
)
}else{
variables$data_update$start_n <- variables$data_update$start_n + data$start_n
variables$data_update$end_n <- variables$data_update$end_n + data$end_n
leafletProxy("map_daily_analysis") %>% clearGroup(group = "light") %>%
addProviderTiles(providers$CartoDB.DarkMatter, group = "dark") %>%
updateMinicharts(
chartdata = variables$data_update[, c("start_n","end_n")],
layerId = variables$data_update$station_name,
legend = FALSE
)
}
}else{
d <- station_update
d$day_hour <- 0
d$start_n <- 0
d$end_n <- 0
leafletProxy("map_daily_analysis") %>% clearGroup(group = "light") %>%
addProviderTiles(providers$CartoDB.DarkMatter, group = "dark") %>%
updateMinicharts(
chartdata = d[,c("start_n","end_n")],
layerId = d$station_name,
legend = FALSE
)
}
}else{
variables$data_update = NULL
variables$currentDate = as.Date(input$timerange, format="%Y-%m-%d")
if(input$timerange %>% ymd_hms() %in% agg_station$day_hour){
data <- agg_station[agg_station$day_hour == input$timerange %>% ymd_hms(),]
station_update$day_hour <- input$timerange %>% ymd_hms()
station_data_update <- station_update[!(station_update$station_name %in% data$station_name),]
data <- rbind(data, station_data_update)
variables$data_update <- data %>% arrange(station_name)
leafletProxy("map_daily_analysis") %>%  clearGroup(group = "light") %>%
addProviderTiles(providers$CartoDB.DarkMatter,group = "dark") %>%
updateMinicharts(
chartdata = variables$data_update[, c("start_n","end_n")],
layerId = variables$data_update$station_name,
legend = FALSE
)
}else{
d <- station_update
d$day_hour <- 0
d$start_n <- 0
d$end_n <- 0
leafletProxy("map_daily_analysis") %>% clearGroup(group = "light") %>%
addProviderTiles(providers$CartoDB.DarkMatter, group = "dark") %>%
updateMinicharts(
chartdata = d[,c("start_n","end_n")],
layerId = d$station_name,
legend = FALSE
)
}
}
}else{
# clearGroup("map_daily_analysis",map="dark")
if(variables$currentDate == as.Date(input$timerange, format="%Y-%m-%d")){
if(input$timerange %>% ymd_hms() %in% agg_station$day_hour){
data <- agg_station[agg_station$day_hour == input$timerange %>% ymd_hms(),]
station_update$day_hour <- input$timerange %>% ymd_hms()
station_data_update <- station_update[!(station_update$station_name %in% data$station_name),]
data <- rbind(data, station_data_update)
data <- data %>% arrange(station_name)
if(is.null(variables$data_update) == TRUE){
variables$data_update <- data
leafletProxy("map_daily_analysis") %>% clearGroup(group = "dark") %>%
addProviderTiles(providers$CartoDB.Positron, group = "light") %>%
updateMinicharts(
chartdata = variables$data_update[, c("start_n","end_n")],
layerId = variables$data_update$station_name,
legend = FALSE
)
}else{
variables$data_update$start_n <- variables$data_update$start_n + data$start_n
variables$data_update$end_n <- variables$data_update$end_n + data$end_n
leafletProxy("map_daily_analysis") %>% clearGroup(group = "dark") %>%
addProviderTiles(providers$CartoDB.Positron, group = "light") %>%
updateMinicharts(
chartdata = variables$data_update[, c("start_n","end_n")],
layerId = variables$data_update$station_name,
legend = FALSE
)
}
}else{
d <- station_update
d$day_hour <- 0
d$start_n <- 0
d$end_n <- 0
leafletProxy("map_daily_analysis") %>% clearGroup(group = "dark") %>%
addProviderTiles(providers$CartoDB.Positron, group = "light") %>%
updateMinicharts(
chartdata = d[,c("start_n","end_n")],
layerId = d$station_name,
legend = FALSE
)
}
}else{
variables$data_update = NULL
variables$currentDate = as.Date(input$timerange, format="%Y-%m-%d")
if(input$timerange %>% ymd_hms() %in% agg_station$day_hour){
data <- agg_station[agg_station$day_hour == input$timerange %>% ymd_hms(),]
station_update$day_hour <- input$timerange %>% ymd_hms()
station_data_update <- station_update[!(station_update$station_name %in% data$station_name),]
data <- rbind(data, station_data_update)
variables$data_update <- data %>% arrange(station_name)
leafletProxy("map_daily_analysis") %>% clearGroup(group = "dark") %>%
addProviderTiles(providers$CartoDB.Positron, group = "light") %>%
updateMinicharts(
chartdata = variables$data_update[, c("start_n","end_n")],
layerId = variables$data_update$station_name,
legend = FALSE
)
}else{
d <- station_update
d$day_hour <- 0
d$start_n <- 0
d$end_n <- 0
leafletProxy("map_daily_analysis") %>%
addProviderTiles(providers$CartoDB.Positron, group = "light") %>% clearGroup(group = "dark") %>%
updateMinicharts(
chartdata = d[,c("start_n","end_n")],
layerId = d$station_name,
legend = FALSE
)
}
}
}
})
observe({
if(!is.null(input$mymap_marker_click)){
if(input$map_station == "origin"){
p <- leafletProxy("mymap", data=agg_start_station) %>% clearShapes()
selected <- start_station[start_station$start_station_name == input$mymap_marker_click$id,]
selected$end_station_name <- as.character(selected$end_station_name)
if(input$map_station_top == 100){
k <- 20
}else{
k <- input$map_station_top
}
selected <- selected[1:k,]
for(i in 1:nrow(selected)){
line_label = paste("",selected[i,1], "-",as.character(selected[i,4]),":",selected[i,7]) %>% lapply(htmltools::HTML)
p <- addPolylines(p, lat=as.numeric(selected[i, c(2,5)]), lng=as.numeric(selected[i, c(3,6)]),
weight = as.numeric(selected[i,7]/60), opacity = 0.7,
label = line_label,
color="#138207",
options = list(need_decorator = T))
}
p
}else{
p <- leafletProxy("mymap", data=agg_end_station) %>% clearShapes()
selected <- start_station[start_station$end_station_name == input$mymap_marker_click$id,]
selected$start_station_name <- as.character(selected$start_station_name)
selected$end_station_name <- as.character(selected$end_station_name)
if(input$map_station_top == 100){
k <- 20
}else{
k <- input$map_station_top
}
selected <- selected[1:k,]
for(i in 1:nrow(selected)){
line_label = paste("",as.character(selected[i,1]), "-",as.character(selected[i,4]),":",selected[i,7]) %>% lapply(htmltools::HTML)
p <- addPolylines(p, lat=as.numeric(selected[i, c(2,5)]), lng=as.numeric(selected[i, c(3,6)]),
weight = as.numeric(selected[i,7]/60), opacity = 0.7,
label = line_label,
color="#f4426b",
options = list(need_decorator = T))
}
p
}
}else{
}
})
}
shinyApp(ui = ui, server = server)
